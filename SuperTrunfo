# -*- coding: utf-8 -*-

def cadastrar_carta(numero_da_carta):
    """
    Fun√ß√£o para solicitar ao usu√°rio os dados de uma carta de cidade
    e retorn√°-los em um dicion√°rio.
    """
    print(f"\n--- üèôÔ∏è  Cadastro da Carta {numero_da_carta} ---")
    
    # Solicita as informa√ß√µes da cidade ao usu√°rio
    estado = input("Digite o estado (ex: SP): ")
    codigo = input("Digite o c√≥digo da carta (ex: C01): ")
    cidade = input("Digite o nome da cidade: ")
    
    # Utiliza try-except para garantir que valores num√©ricos sejam inseridos corretamente
    while True:
        try:
            populacao = int(input("Digite a popula√ß√£o: "))
            area = float(input("Digite a √°rea (em km¬≤): "))
            pib = float(input("Digite o PIB (em bilh√µes de R$): "))
            pontos_turisticos = int(input("Digite o n√∫mero de pontos tur√≠sticos: "))
            break # Sai do loop se todos os n√∫meros forem v√°lidos
        except ValueError:
            print("\nüö® Erro: Popula√ß√£o, √°rea, PIB e pontos tur√≠sticos devem ser n√∫meros. Tente novamente.\n")

    # Cria um dicion√°rio para armazenar os dados da carta
    carta = {
        'estado': estado.upper(),
        'codigo': codigo.upper(),
        'cidade': cidade,
        'populacao': populacao,
        'area': area,
        'pib': pib,
        'pontos_turisticos': pontos_turisticos,
        # Calcula a densidade populacional (habitantes por km¬≤)
        # Adiciona uma verifica√ß√£o para evitar divis√£o por zero
        'densidade': (populacao / area) if area > 0 else 0
    }
    
    return carta

def exibir_carta(carta):
    """
    Fun√ß√£o para exibir os dados de uma carta de forma organizada.
    """
    print(f"\n--- Detalhes da Carta: {carta['cidade']} ---")
    print(f"C√≥digo: {carta['codigo']}")
    print(f"Cidade: {carta['cidade']} - {carta['estado']}")
    print(f"Popula√ß√£o: {carta['populacao']:,} habitantes".replace(',', '.'))
    print(f"√Årea: {carta['area']:,.2f} km¬≤".replace(',', '.'))
    print(f"Densidade Populacional: {carta['densidade']:,.2f} hab/km¬≤".replace(',', '.'))
    print(f"PIB: R$ {carta['pib']:,.2f} bilh√µes".replace(',', '.'))
    print(f"Pontos Tur√≠sticos: {carta['pontos_turisticos']}")
    print("-" * 30)

def comparar_cartas(carta1, carta2, atributo):
    """
    Compara duas cartas com base em um atributo espec√≠fico.
    """
    print(f"\n--- ‚öîÔ∏è  Comparando por: {atributo.upper()} ---")

    # Regra especial para densidade: menor valor vence
    if atributo == 'densidade':
        print("(Regra especial: Menor valor vence)")
        valor1 = carta1[atributo]
        valor2 = carta2[atributo]
        
        if valor1 < valor2:
            vencedor = carta1
        elif valor2 < valor1:
            vencedor = carta2
        else:
            vencedor = None # Empate
            
    # Regra padr√£o: maior valor vence para os outros atributos
    else:
        print("(Regra padr√£o: Maior valor vence)")
        valor1 = carta1[atributo]
        valor2 = carta2[atributo]
        
        if valor1 > valor2:
            vencedor = carta1
        elif valor2 > valor1:
            vencedor = carta2
        else:
            vencedor = None # Empate

    # Exibi√ß√£o do resultado
    if vencedor:
        print(f"üèÜ A carta vencedora √©: {vencedor['cidade']} ({vencedor['estado']})!")
    else:
        print("‚öñÔ∏è Resultado: Houve um empate!")

# --- Programa Principal ---
def main():
    """
    Fun√ß√£o principal que executa o fluxo do programa.
    """
    print("Bem-vindo ao Jogo de Cartas de Cidades!")
    
    # 1. Cadastro de Cartas
    carta_1 = cadastrar_carta(1)
    carta_2 = cadastrar_carta(2)
    
    # 2. Exibi√ß√£o das Cartas Cadastradas
    print("\n==========================================")
    print("   CARTAS CADASTRADAS COM SUCESSO!   ")
    print("==========================================")
    exibir_carta(carta_1)
    exibir_carta(carta_2)
    
    # 3. Compara√ß√£o e Exibi√ß√£o dos Resultados
    print("\n==========================================")
    print("        INICIANDO COMPARA√á√ïES        ")
    print("==========================================")
    
    # Exemplos de compara√ß√£o com base em diferentes atributos
    comparar_cartas(carta_1, carta_2, 'populacao')
    comparar_cartas(carta_1, carta_2, 'pib')
    comparar_cartas(carta_1, carta_2, 'densidade') # Usa a regra especial
    comparar_cartas(carta_1, carta_2, 'pontos_turisticos')

# Garante que o programa s√≥ execute quando este arquivo for o principal
if __name__ == "__main__":      
    main()
